import numpy as np
from scipy.constants import mu_0, pi

from src.fields import ScalarField, VectorField


class BiotSavartEquationSolver:
    """
    A Biot–Savart law solver used to compute the resultant magnetic field B in 2D-space generated by a constant current
    field I (for example due to wires).
    """

    def solve(self, electric_current: VectorField) -> VectorField:
        """
        Solve the Biot–Savart equation to compute the magnetic field given an electric current field.

        Parameters
        ----------
        electric_current : VectorField
            A vector field I : ℝ² → ℝ³ ; (x, y) → (I_x(x, y), I_y(x, y), I_z(x, y)), where I_x(x, y), I_y(x, y) and
            I_z(x, y) are the 3 components of the electric current vector at a given point (x, y) in space. Note that
            I_z = 0 is always True in our 2D world.

        Returns
        -------
        magnetic_field : VectorField
            A vector field B : ℝ² → ℝ³ ; (x, y) → (B_x(x, y), B_y(x, y), B_z(x, y)), where B_x(x, y), B_y(x, y) and
            B_z(x, y) are the 3 components of the magnetic vector at a given point (x, y) in space. Note that
            B_x = B_y = 0 is always True in our 2D world.
        """

        Fils_x = np.argwhere(electric_current.x.swapaxes(1,0) != 0)
        coor = None
        Elem_x = []
        for i in Fils_x:
            i_x, i_y = i[1], i[0]
            if coor == None:
                coor = i_y
                Bout1 = i_x
            elif i_y == coor:
                Bout2 = i_x
                continue
            elif i_y != coor:
                Elem_x += [(Bout1, Bout2, coor, electric_current.x[Bout1, coor])]
                coor = i_y
                Bout1 = i_x
        Elem_x += [(Bout1, Bout2, coor, electric_current.x[Bout1, coor])]
        print(Elem_x)

        Fils_y = np.argwhere(electric_current.y != 0)
        coor = None
        Elem_y = []
        for i in Fils_y:
            i_x, i_y = i[0], i[1]
            if coor == None:
                coor = i_x
                Bout1 = i_y
            elif i_x == coor:
                Bout2 = i_y
                continue
            elif i_x != coor:
                Elem_y += [(Bout1, Bout2, coor, electric_current.y[Bout1, coor])]
                coor = i_x
                Bout1 = i_y
        Elem_y += [(Bout1, Bout2, coor, electric_current.y[Bout1, coor])]
        print(Elem_y)

        (x,y) = electric_current.x.shape
        Mag = np.zeros((x,y,3))
        B = 0

        for i in range(x):
            for j in range(y):
                B = 0
                for I_x in Elem_x:
                    I_hor = I_x[3]
                    delta_y = (I_x[0][1] - j)
                    if delta_y == 0:
                        B += 0
                        continue
                    delta_x_1 = (I_x[0][0] - j)
                    angle_1 = np.arctan(delta_x_1/delta_y)
                    delta_x_2 = (I_x[1][0] - j)
                    angle_2 = np.arctan(delta_x_2/delta_y)
                    B += (I_hor/delta_y)*(np.sin(angle_2) - np.sin(angle_1))

                for I_y in Elem_y:
                    I_ver = I_y[3]
                    delta_x = (I_y[0][0] - j)
                    if delta_x == 0:
                        B += 0
                        continue
                    delta_y_1 = (I_y[0][1] - j)
                    angle_1 = np.arctan(delta_y_1/delta_x)
                    delta_y_2 = (I_y[1][1] - j)
                    angle_2 = np.arctan(delta_y_2/delta_x)
                    B += (I_ver/delta_x)*(np.sin(angle_2) - np.sin(angle_1))

        out = VectorField(Mag)

        return out
